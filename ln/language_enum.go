// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package ln

import (
	"errors"
	"fmt"
)

const (
	// LogOut is a L of type LogOut.
	LogOut L = iota
	// PatientName is a L of type PatientName.
	PatientName
	// Species is a L of type Species.
	Species
	// Details is a L of type Details.
	Details
	// CheckInPatient is a L of type CheckInPatient.
	CheckInPatient
	// ManageSpecies is a L of type ManageSpecies.
	ManageSpecies
	// Latin is a L of type Latin.
	Latin
	// Update is a L of type Update.
	Update
	// AddSpecies is a L of type AddSpecies.
	AddSpecies
)

var ErrInvalidL = errors.New("not a valid L")

const _LName = "LogOutPatientNameSpeciesDetailsCheckInPatientManageSpeciesLatinUpdateAddSpecies"

var _LMap = map[L]string{
	LogOut:         _LName[0:6],
	PatientName:    _LName[6:17],
	Species:        _LName[17:24],
	Details:        _LName[24:31],
	CheckInPatient: _LName[31:45],
	ManageSpecies:  _LName[45:58],
	Latin:          _LName[58:63],
	Update:         _LName[63:69],
	AddSpecies:     _LName[69:79],
}

// String implements the Stringer interface.
func (x L) String() string {
	if str, ok := _LMap[x]; ok {
		return str
	}
	return fmt.Sprintf("L(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x L) IsValid() bool {
	_, ok := _LMap[x]
	return ok
}

var _LValue = map[string]L{
	_LName[0:6]:   LogOut,
	_LName[6:17]:  PatientName,
	_LName[17:24]: Species,
	_LName[24:31]: Details,
	_LName[31:45]: CheckInPatient,
	_LName[45:58]: ManageSpecies,
	_LName[58:63]: Latin,
	_LName[63:69]: Update,
	_LName[69:79]: AddSpecies,
}

// ParseL attempts to convert a string to a L.
func ParseL(name string) (L, error) {
	if x, ok := _LValue[name]; ok {
		return x, nil
	}
	return L(0), fmt.Errorf("%s is %w", name, ErrInvalidL)
}
