// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package ln

import (
	"errors"
	"fmt"
)

const (
	// LogOut is a L of type LogOut.
	LogOut L = iota
	// PatientName is a L of type PatientName.
	PatientName
	// Species is a L of type Species.
	Species
	// Tags is a L of type Tags.
	Tags
	// CheckInPatient is a L of type CheckInPatient.
	CheckInPatient
	// ManageSpecies is a L of type ManageSpecies.
	ManageSpecies
	// Latin is a L of type Latin.
	Latin
	// Update is a L of type Update.
	Update
	// AddSpecies is a L of type AddSpecies.
	AddSpecies
	// ManageHomes is a L of type ManageHomes.
	ManageHomes
	// Dashboard is a L of type Dashboard.
	Dashboard
	// ManageTags is a L of type ManageTags.
	ManageTags
	// Calendar is a L of type Calendar.
	Calendar
	// ManageStatuses is a L of type ManageStatuses.
	ManageStatuses
	// ManageEvents is a L of type ManageEvents.
	ManageEvents
	// AdminRoot is a L of type AdminRoot.
	AdminRoot
	// ViewHomes is a L of type ViewHomes.
	ViewHomes
	// ErrorPageHead is a L of type ErrorPageHead.
	ErrorPageHead
	// ErrorPageInstructions is a L of type ErrorPageInstructions.
	ErrorPageInstructions
)

var ErrInvalidL = errors.New("not a valid L")

const _LName = "LogOutPatientNameSpeciesTagsCheckInPatientManageSpeciesLatinUpdateAddSpeciesManageHomesDashboardManageTagsCalendarManageStatusesManageEventsAdminRootViewHomesErrorPageHeadErrorPageInstructions"

var _LMap = map[L]string{
	LogOut:                _LName[0:6],
	PatientName:           _LName[6:17],
	Species:               _LName[17:24],
	Tags:                  _LName[24:28],
	CheckInPatient:        _LName[28:42],
	ManageSpecies:         _LName[42:55],
	Latin:                 _LName[55:60],
	Update:                _LName[60:66],
	AddSpecies:            _LName[66:76],
	ManageHomes:           _LName[76:87],
	Dashboard:             _LName[87:96],
	ManageTags:            _LName[96:106],
	Calendar:              _LName[106:114],
	ManageStatuses:        _LName[114:128],
	ManageEvents:          _LName[128:140],
	AdminRoot:             _LName[140:149],
	ViewHomes:             _LName[149:158],
	ErrorPageHead:         _LName[158:171],
	ErrorPageInstructions: _LName[171:192],
}

// String implements the Stringer interface.
func (x L) String() string {
	if str, ok := _LMap[x]; ok {
		return str
	}
	return fmt.Sprintf("L(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x L) IsValid() bool {
	_, ok := _LMap[x]
	return ok
}

var _LValue = map[string]L{
	_LName[0:6]:     LogOut,
	_LName[6:17]:    PatientName,
	_LName[17:24]:   Species,
	_LName[24:28]:   Tags,
	_LName[28:42]:   CheckInPatient,
	_LName[42:55]:   ManageSpecies,
	_LName[55:60]:   Latin,
	_LName[60:66]:   Update,
	_LName[66:76]:   AddSpecies,
	_LName[76:87]:   ManageHomes,
	_LName[87:96]:   Dashboard,
	_LName[96:106]:  ManageTags,
	_LName[106:114]: Calendar,
	_LName[114:128]: ManageStatuses,
	_LName[128:140]: ManageEvents,
	_LName[140:149]: AdminRoot,
	_LName[149:158]: ViewHomes,
	_LName[158:171]: ErrorPageHead,
	_LName[171:192]: ErrorPageInstructions,
}

// ParseL attempts to convert a string to a L.
func ParseL(name string) (L, error) {
	if x, ok := _LValue[name]; ok {
		return x, nil
	}
	return L(0), fmt.Errorf("%s is %w", name, ErrInvalidL)
}
