// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package ln

import (
	"errors"
	"fmt"
)

const (
	// AdminDefaultIncludeTag is a L of type AdminDefaultIncludeTag.
	AdminDefaultIncludeTag L = iota
	// AdminDisplayName is a L of type AdminDisplayName.
	AdminDisplayName
	// AdminEmailAddress is a L of type AdminEmailAddress.
	AdminEmailAddress
	// AdminManageEvents is a L of type AdminManageEvents.
	AdminManageEvents
	// AdminManageHomes is a L of type AdminManageHomes.
	AdminManageHomes
	// AdminManageSpecies is a L of type AdminManageSpecies.
	AdminManageSpecies
	// AdminManageStatuses is a L of type AdminManageStatuses.
	AdminManageStatuses
	// AdminManageTags is a L of type AdminManageTags.
	AdminManageTags
	// AdminRoot is a L of type AdminRoot.
	AdminRoot
	// AdminUnassignedUsers is a L of type AdminUnassignedUsers.
	AdminUnassignedUsers
	// AuthLogOut is a L of type AuthLogOut.
	AuthLogOut
	// CheckinCheckInPatient is a L of type CheckinCheckInPatient.
	CheckinCheckInPatient
	// CheckinIHaveThePatient is a L of type CheckinIHaveThePatient.
	CheckinIHaveThePatient
	// CheckinPatientName is a L of type CheckinPatientName.
	CheckinPatientName
	// ErrorPageHead is a L of type ErrorPageHead.
	ErrorPageHead
	// ErrorPageInstructions is a L of type ErrorPageInstructions.
	ErrorPageInstructions
	// FooterPrivacy is a L of type FooterPrivacy.
	FooterPrivacy
	// FooterSourceCode is a L of type FooterSourceCode.
	FooterSourceCode
	// GenericAdd is a L of type GenericAdd.
	GenericAdd
	// GenericLatin is a L of type GenericLatin.
	GenericLatin
	// GenericMove is a L of type GenericMove.
	GenericMove
	// GenericMoveTo is a L of type GenericMoveTo.
	GenericMoveTo
	// GenericNone is a L of type GenericNone.
	GenericNone
	// GenericSpecies is a L of type GenericSpecies.
	GenericSpecies
	// GenericTags is a L of type GenericTags.
	GenericTags
	// GenericUpdate is a L of type GenericUpdate.
	GenericUpdate
	// HomeArchiveHome is a L of type HomeArchiveHome.
	HomeArchiveHome
	// HomesAddToHome is a L of type HomesAddToHome.
	HomesAddToHome
	// HomesAddUserToHome is a L of type HomesAddUserToHome.
	HomesAddUserToHome
	// HomesCannotAddPatientBecauseUserIsHomeless is a L of type HomesCannotAddPatientBecauseUserIsHomeless.
	HomesCannotAddPatientBecauseUserIsHomeless
	// HomesCreateHome is a L of type HomesCreateHome.
	HomesCreateHome
	// HomesCreateHomeNote is a L of type HomesCreateHomeNote.
	HomesCreateHomeNote
	// HomesEmptyHome is a L of type HomesEmptyHome.
	HomesEmptyHome
	// HomesHomeName is a L of type HomesHomeName.
	HomesHomeName
	// HomesRemoveFromCurrent is a L of type HomesRemoveFromCurrent.
	HomesRemoveFromCurrent
	// HomesViewHomes is a L of type HomesViewHomes.
	HomesViewHomes
	// NavbarCalendar is a L of type NavbarCalendar.
	NavbarCalendar
	// NavbarDashboard is a L of type NavbarDashboard.
	NavbarDashboard
)

var ErrInvalidL = errors.New("not a valid L")

const _LName = "AdminDefaultIncludeTagAdminDisplayNameAdminEmailAddressAdminManageEventsAdminManageHomesAdminManageSpeciesAdminManageStatusesAdminManageTagsAdminRootAdminUnassignedUsersAuthLogOutCheckinCheckInPatientCheckinIHaveThePatientCheckinPatientNameErrorPageHeadErrorPageInstructionsFooterPrivacyFooterSourceCodeGenericAddGenericLatinGenericMoveGenericMoveToGenericNoneGenericSpeciesGenericTagsGenericUpdateHomeArchiveHomeHomesAddToHomeHomesAddUserToHomeHomesCannotAddPatientBecauseUserIsHomelessHomesCreateHomeHomesCreateHomeNoteHomesEmptyHomeHomesHomeNameHomesRemoveFromCurrentHomesViewHomesNavbarCalendarNavbarDashboard"

var _LMap = map[L]string{
	AdminDefaultIncludeTag: _LName[0:22],
	AdminDisplayName:       _LName[22:38],
	AdminEmailAddress:      _LName[38:55],
	AdminManageEvents:      _LName[55:72],
	AdminManageHomes:       _LName[72:88],
	AdminManageSpecies:     _LName[88:106],
	AdminManageStatuses:    _LName[106:125],
	AdminManageTags:        _LName[125:140],
	AdminRoot:              _LName[140:149],
	AdminUnassignedUsers:   _LName[149:169],
	AuthLogOut:             _LName[169:179],
	CheckinCheckInPatient:  _LName[179:200],
	CheckinIHaveThePatient: _LName[200:222],
	CheckinPatientName:     _LName[222:240],
	ErrorPageHead:          _LName[240:253],
	ErrorPageInstructions:  _LName[253:274],
	FooterPrivacy:          _LName[274:287],
	FooterSourceCode:       _LName[287:303],
	GenericAdd:             _LName[303:313],
	GenericLatin:           _LName[313:325],
	GenericMove:            _LName[325:336],
	GenericMoveTo:          _LName[336:349],
	GenericNone:            _LName[349:360],
	GenericSpecies:         _LName[360:374],
	GenericTags:            _LName[374:385],
	GenericUpdate:          _LName[385:398],
	HomeArchiveHome:        _LName[398:413],
	HomesAddToHome:         _LName[413:427],
	HomesAddUserToHome:     _LName[427:445],
	HomesCannotAddPatientBecauseUserIsHomeless: _LName[445:487],
	HomesCreateHome:        _LName[487:502],
	HomesCreateHomeNote:    _LName[502:521],
	HomesEmptyHome:         _LName[521:535],
	HomesHomeName:          _LName[535:548],
	HomesRemoveFromCurrent: _LName[548:570],
	HomesViewHomes:         _LName[570:584],
	NavbarCalendar:         _LName[584:598],
	NavbarDashboard:        _LName[598:613],
}

// String implements the Stringer interface.
func (x L) String() string {
	if str, ok := _LMap[x]; ok {
		return str
	}
	return fmt.Sprintf("L(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x L) IsValid() bool {
	_, ok := _LMap[x]
	return ok
}

var _LValue = map[string]L{
	_LName[0:22]:    AdminDefaultIncludeTag,
	_LName[22:38]:   AdminDisplayName,
	_LName[38:55]:   AdminEmailAddress,
	_LName[55:72]:   AdminManageEvents,
	_LName[72:88]:   AdminManageHomes,
	_LName[88:106]:  AdminManageSpecies,
	_LName[106:125]: AdminManageStatuses,
	_LName[125:140]: AdminManageTags,
	_LName[140:149]: AdminRoot,
	_LName[149:169]: AdminUnassignedUsers,
	_LName[169:179]: AuthLogOut,
	_LName[179:200]: CheckinCheckInPatient,
	_LName[200:222]: CheckinIHaveThePatient,
	_LName[222:240]: CheckinPatientName,
	_LName[240:253]: ErrorPageHead,
	_LName[253:274]: ErrorPageInstructions,
	_LName[274:287]: FooterPrivacy,
	_LName[287:303]: FooterSourceCode,
	_LName[303:313]: GenericAdd,
	_LName[313:325]: GenericLatin,
	_LName[325:336]: GenericMove,
	_LName[336:349]: GenericMoveTo,
	_LName[349:360]: GenericNone,
	_LName[360:374]: GenericSpecies,
	_LName[374:385]: GenericTags,
	_LName[385:398]: GenericUpdate,
	_LName[398:413]: HomeArchiveHome,
	_LName[413:427]: HomesAddToHome,
	_LName[427:445]: HomesAddUserToHome,
	_LName[445:487]: HomesCannotAddPatientBecauseUserIsHomeless,
	_LName[487:502]: HomesCreateHome,
	_LName[502:521]: HomesCreateHomeNote,
	_LName[521:535]: HomesEmptyHome,
	_LName[535:548]: HomesHomeName,
	_LName[548:570]: HomesRemoveFromCurrent,
	_LName[570:584]: HomesViewHomes,
	_LName[584:598]: NavbarCalendar,
	_LName[598:613]: NavbarDashboard,
}

// ParseL attempts to convert a string to a L.
func ParseL(name string) (L, error) {
	if x, ok := _LValue[name]; ok {
		return x, nil
	}
	return L(0), fmt.Errorf("%s is %w", name, ErrInvalidL)
}
