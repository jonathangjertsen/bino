// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package ln

import (
	"errors"
	"fmt"
)

const (
	// KeyLogOut is a Key of type LogOut.
	KeyLogOut Key = iota
	// KeyPatientName is a Key of type PatientName.
	KeyPatientName
	// KeySpecies is a Key of type Species.
	KeySpecies
	// KeyDetails is a Key of type Details.
	KeyDetails
	// KeyCheckInPatient is a Key of type CheckInPatient.
	KeyCheckInPatient
)

var ErrInvalidKey = errors.New("not a valid Key")

const _KeyName = "LogOutPatientNameSpeciesDetailsCheckInPatient"

var _KeyMap = map[Key]string{
	KeyLogOut:         _KeyName[0:6],
	KeyPatientName:    _KeyName[6:17],
	KeySpecies:        _KeyName[17:24],
	KeyDetails:        _KeyName[24:31],
	KeyCheckInPatient: _KeyName[31:45],
}

// String implements the Stringer interface.
func (x Key) String() string {
	if str, ok := _KeyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Key(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Key) IsValid() bool {
	_, ok := _KeyMap[x]
	return ok
}

var _KeyValue = map[string]Key{
	_KeyName[0:6]:   KeyLogOut,
	_KeyName[6:17]:  KeyPatientName,
	_KeyName[17:24]: KeySpecies,
	_KeyName[24:31]: KeyDetails,
	_KeyName[31:45]: KeyCheckInPatient,
}

// ParseKey attempts to convert a string to a Key.
func ParseKey(name string) (Key, error) {
	if x, ok := _KeyValue[name]; ok {
		return x, nil
	}
	return Key(0), fmt.Errorf("%s is %w", name, ErrInvalidKey)
}
