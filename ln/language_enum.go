// Code generated by go-enum DO NOT EDIT.
// Version: 0.9.0
// Revision: 4061a5d82779342c5863a515363feb943fa59455
// Build Date: 2025-07-22T03:42:20Z
// Built By: goreleaser

package ln

import (
	"errors"
	"fmt"
)

const (
	// LogOut is a L of type LogOut.
	LogOut L = iota
	// PatientName is a L of type PatientName.
	PatientName
	// Species is a L of type Species.
	Species
	// Tags is a L of type Tags.
	Tags
	// CheckInPatient is a L of type CheckInPatient.
	CheckInPatient
	// ManageSpecies is a L of type ManageSpecies.
	ManageSpecies
	// Latin is a L of type Latin.
	Latin
	// Update is a L of type Update.
	Update
	// Add is a L of type Add.
	Add
	// ManageHomes is a L of type ManageHomes.
	ManageHomes
	// Dashboard is a L of type Dashboard.
	Dashboard
	// ManageTags is a L of type ManageTags.
	ManageTags
	// Calendar is a L of type Calendar.
	Calendar
	// ManageStatuses is a L of type ManageStatuses.
	ManageStatuses
	// ManageEvents is a L of type ManageEvents.
	ManageEvents
	// AdminRoot is a L of type AdminRoot.
	AdminRoot
	// ViewHomes is a L of type ViewHomes.
	ViewHomes
	// ErrorPageHead is a L of type ErrorPageHead.
	ErrorPageHead
	// ErrorPageInstructions is a L of type ErrorPageInstructions.
	ErrorPageInstructions
	// DefaultIncludeTag is a L of type DefaultIncludeTag.
	DefaultIncludeTag
	// UnassignedUsers is a L of type UnassignedUsers.
	UnassignedUsers
	// DisplayName is a L of type DisplayName.
	DisplayName
	// EmailAddress is a L of type EmailAddress.
	EmailAddress
	// AddToHome is a L of type AddToHome.
	AddToHome
	// CreateHome is a L of type CreateHome.
	CreateHome
	// HomeName is a L of type HomeName.
	HomeName
	// CreateHomeNote is a L of type CreateHomeNote.
	CreateHomeNote
	// EmptyHome is a L of type EmptyHome.
	EmptyHome
	// AddUserToHome is a L of type AddUserToHome.
	AddUserToHome
	// CannotAddPatientBecauseUserIsHomeless is a L of type CannotAddPatientBecauseUserIsHomeless.
	CannotAddPatientBecauseUserIsHomeless
	// RemoveFromCurrent is a L of type RemoveFromCurrent.
	RemoveFromCurrent
	// Move is a L of type Move.
	Move
	// None is a L of type None.
	None
	// ArchiveHome is a L of type ArchiveHome.
	ArchiveHome
	// Privacy is a L of type Privacy.
	Privacy
)

var ErrInvalidL = errors.New("not a valid L")

const _LName = "LogOutPatientNameSpeciesTagsCheckInPatientManageSpeciesLatinUpdateAddManageHomesDashboardManageTagsCalendarManageStatusesManageEventsAdminRootViewHomesErrorPageHeadErrorPageInstructionsDefaultIncludeTagUnassignedUsersDisplayNameEmailAddressAddToHomeCreateHomeHomeNameCreateHomeNoteEmptyHomeAddUserToHomeCannotAddPatientBecauseUserIsHomelessRemoveFromCurrentMoveNoneArchiveHomePrivacy"

var _LMap = map[L]string{
	LogOut:                                _LName[0:6],
	PatientName:                           _LName[6:17],
	Species:                               _LName[17:24],
	Tags:                                  _LName[24:28],
	CheckInPatient:                        _LName[28:42],
	ManageSpecies:                         _LName[42:55],
	Latin:                                 _LName[55:60],
	Update:                                _LName[60:66],
	Add:                                   _LName[66:69],
	ManageHomes:                           _LName[69:80],
	Dashboard:                             _LName[80:89],
	ManageTags:                            _LName[89:99],
	Calendar:                              _LName[99:107],
	ManageStatuses:                        _LName[107:121],
	ManageEvents:                          _LName[121:133],
	AdminRoot:                             _LName[133:142],
	ViewHomes:                             _LName[142:151],
	ErrorPageHead:                         _LName[151:164],
	ErrorPageInstructions:                 _LName[164:185],
	DefaultIncludeTag:                     _LName[185:202],
	UnassignedUsers:                       _LName[202:217],
	DisplayName:                           _LName[217:228],
	EmailAddress:                          _LName[228:240],
	AddToHome:                             _LName[240:249],
	CreateHome:                            _LName[249:259],
	HomeName:                              _LName[259:267],
	CreateHomeNote:                        _LName[267:281],
	EmptyHome:                             _LName[281:290],
	AddUserToHome:                         _LName[290:303],
	CannotAddPatientBecauseUserIsHomeless: _LName[303:340],
	RemoveFromCurrent:                     _LName[340:357],
	Move:                                  _LName[357:361],
	None:                                  _LName[361:365],
	ArchiveHome:                           _LName[365:376],
	Privacy:                               _LName[376:383],
}

// String implements the Stringer interface.
func (x L) String() string {
	if str, ok := _LMap[x]; ok {
		return str
	}
	return fmt.Sprintf("L(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x L) IsValid() bool {
	_, ok := _LMap[x]
	return ok
}

var _LValue = map[string]L{
	_LName[0:6]:     LogOut,
	_LName[6:17]:    PatientName,
	_LName[17:24]:   Species,
	_LName[24:28]:   Tags,
	_LName[28:42]:   CheckInPatient,
	_LName[42:55]:   ManageSpecies,
	_LName[55:60]:   Latin,
	_LName[60:66]:   Update,
	_LName[66:69]:   Add,
	_LName[69:80]:   ManageHomes,
	_LName[80:89]:   Dashboard,
	_LName[89:99]:   ManageTags,
	_LName[99:107]:  Calendar,
	_LName[107:121]: ManageStatuses,
	_LName[121:133]: ManageEvents,
	_LName[133:142]: AdminRoot,
	_LName[142:151]: ViewHomes,
	_LName[151:164]: ErrorPageHead,
	_LName[164:185]: ErrorPageInstructions,
	_LName[185:202]: DefaultIncludeTag,
	_LName[202:217]: UnassignedUsers,
	_LName[217:228]: DisplayName,
	_LName[228:240]: EmailAddress,
	_LName[240:249]: AddToHome,
	_LName[249:259]: CreateHome,
	_LName[259:267]: HomeName,
	_LName[267:281]: CreateHomeNote,
	_LName[281:290]: EmptyHome,
	_LName[290:303]: AddUserToHome,
	_LName[303:340]: CannotAddPatientBecauseUserIsHomeless,
	_LName[340:357]: RemoveFromCurrent,
	_LName[357:361]: Move,
	_LName[361:365]: None,
	_LName[365:376]: ArchiveHome,
	_LName[376:383]: Privacy,
}

// ParseL attempts to convert a string to a L.
func ParseL(name string) (L, error) {
	if x, ok := _LValue[name]; ok {
		return x, nil
	}
	return L(0), fmt.Errorf("%s is %w", name, ErrInvalidL)
}
