// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package main

import (
	"errors"
	"fmt"
)

const (
	// LanguageIDNO is a LanguageID of type NO.
	LanguageIDNO LanguageID = 1
	// LanguageIDEN is a LanguageID of type EN.
	LanguageIDEN LanguageID = 2
)

var ErrInvalidLanguageID = errors.New("not a valid LanguageID")

const _LanguageIDName = "NOEN"

// LanguageIDValues returns a list of the values for LanguageID
func LanguageIDValues() []LanguageID {
	return []LanguageID{
		LanguageIDNO,
		LanguageIDEN,
	}
}

var _LanguageIDMap = map[LanguageID]string{
	LanguageIDNO: _LanguageIDName[0:2],
	LanguageIDEN: _LanguageIDName[2:4],
}

// String implements the Stringer interface.
func (x LanguageID) String() string {
	if str, ok := _LanguageIDMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LanguageID(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LanguageID) IsValid() bool {
	_, ok := _LanguageIDMap[x]
	return ok
}

var _LanguageIDValue = map[string]LanguageID{
	_LanguageIDName[0:2]: LanguageIDNO,
	_LanguageIDName[2:4]: LanguageIDEN,
}

// ParseLanguageID attempts to convert a string to a LanguageID.
func ParseLanguageID(name string) (LanguageID, error) {
	if x, ok := _LanguageIDValue[name]; ok {
		return x, nil
	}
	return LanguageID(0), fmt.Errorf("%s is %w", name, ErrInvalidLanguageID)
}
