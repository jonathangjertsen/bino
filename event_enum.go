// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package main

import (
	"errors"
	"fmt"
)

const (
	// EventUnknown is a Event of type Unknown.
	EventUnknown Event = 0
	// EventRegistered is a Event of type Registered.
	EventRegistered Event = 1
	// EventAdmitted is a Event of type Admitted.
	EventAdmitted Event = 2
	// EventAdopted is a Event of type Adopted.
	EventAdopted Event = 3
	// EventReleased is a Event of type Released.
	EventReleased Event = 4
	// EventTransferredToOtherHome is a Event of type TransferredToOtherHome.
	EventTransferredToOtherHome Event = 5
	// EventTransferredOutsideOrganization is a Event of type TransferredOutsideOrganization.
	EventTransferredOutsideOrganization Event = 6
	// EventDied is a Event of type Died.
	EventDied Event = 7
	// EventEuthanized is a Event of type Euthanized.
	EventEuthanized Event = 8
)

var ErrInvalidEvent = errors.New("not a valid Event")

const _EventName = "UnknownRegisteredAdmittedAdoptedReleasedTransferredToOtherHomeTransferredOutsideOrganizationDiedEuthanized"

var _EventMap = map[Event]string{
	EventUnknown:                        _EventName[0:7],
	EventRegistered:                     _EventName[7:17],
	EventAdmitted:                       _EventName[17:25],
	EventAdopted:                        _EventName[25:32],
	EventReleased:                       _EventName[32:40],
	EventTransferredToOtherHome:         _EventName[40:62],
	EventTransferredOutsideOrganization: _EventName[62:92],
	EventDied:                           _EventName[92:96],
	EventEuthanized:                     _EventName[96:106],
}

// String implements the Stringer interface.
func (x Event) String() string {
	if str, ok := _EventMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Event(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Event) IsValid() bool {
	_, ok := _EventMap[x]
	return ok
}

var _EventValue = map[string]Event{
	_EventName[0:7]:    EventUnknown,
	_EventName[7:17]:   EventRegistered,
	_EventName[17:25]:  EventAdmitted,
	_EventName[25:32]:  EventAdopted,
	_EventName[32:40]:  EventReleased,
	_EventName[40:62]:  EventTransferredToOtherHome,
	_EventName[62:92]:  EventTransferredOutsideOrganization,
	_EventName[92:96]:  EventDied,
	_EventName[96:106]: EventEuthanized,
}

// ParseEvent attempts to convert a string to a Event.
func ParseEvent(name string) (Event, error) {
	if x, ok := _EventValue[name]; ok {
		return x, nil
	}
	return Event(0), fmt.Errorf("%s is %w", name, ErrInvalidEvent)
}
