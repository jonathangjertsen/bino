// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"
)

const addSpecies = `-- name: AddSpecies :one
INSERT INTO species (scientific_name)
VALUES ($1)
RETURNING id
`

func (q *Queries) AddSpecies(ctx context.Context, scientificName string) (int32, error) {
	row := q.db.QueryRow(ctx, addSpecies, scientificName)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getLanguages = `-- name: GetLanguages :many
SELECT id, short_name, self_name FROM language
ORDER BY id ASC
`

func (q *Queries) GetLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.db.Query(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.ID, &i.ShortName, &i.SelfName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecies = `-- name: GetSpecies :many
SELECT id, scientific_name FROM species
ORDER BY id
`

func (q *Queries) GetSpecies(ctx context.Context) ([]Species, error) {
	rows, err := q.db.Query(ctx, getSpecies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Species
	for rows.Next() {
		var i Species
		if err := rows.Scan(&i.ID, &i.ScientificName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesLanguage = `-- name: GetSpeciesLanguage :many
SELECT species_id, language_id, name FROM species_language
ORDER BY (species_id, language_id)
`

func (q *Queries) GetSpeciesLanguage(ctx context.Context) ([]SpeciesLanguage, error) {
	rows, err := q.db.Query(ctx, getSpeciesLanguage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpeciesLanguage
	for rows.Next() {
		var i SpeciesLanguage
		if err := rows.Scan(&i.SpeciesID, &i.LanguageID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesWithLanguage = `-- name: GetSpeciesWithLanguage :many
SELECT species_id, name FROM species_language
WHERE language_id = $1
ORDER BY (species_id)
`

type GetSpeciesWithLanguageRow struct {
	SpeciesID int32
	Name      string
}

func (q *Queries) GetSpeciesWithLanguage(ctx context.Context, languageID int32) ([]GetSpeciesWithLanguageRow, error) {
	rows, err := q.db.Query(ctx, getSpeciesWithLanguage, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSpeciesWithLanguageRow
	for rows.Next() {
		var i GetSpeciesWithLanguageRow
		if err := rows.Scan(&i.SpeciesID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT au.id, au.display_name, au.google_sub, au.email, COALESCE(al.language_id, 1) FROM appuser AS au
LEFT JOIN appuser_language AS al
ON au.id = al.appuser_id
WHERE id = $1
`

type GetUserRow struct {
	ID          int32
	DisplayName string
	GoogleSub   string
	Email       string
	LanguageID  int32
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.GoogleSub,
		&i.Email,
		&i.LanguageID,
	)
	return i, err
}

const setUserLanguage = `-- name: SetUserLanguage :exec
INSERT INTO appuser_language (appuser_id, language_id)
VALUES ($1, $2)
ON CONFLICT (appuser_id) DO UPDATE
    SET language_id = EXCLUDED.language_id
`

type SetUserLanguageParams struct {
	AppuserID  int32
	LanguageID int32
}

func (q *Queries) SetUserLanguage(ctx context.Context, arg SetUserLanguageParams) error {
	_, err := q.db.Exec(ctx, setUserLanguage, arg.AppuserID, arg.LanguageID)
	return err
}

const upsertSpeciesLanguage = `-- name: UpsertSpeciesLanguage :exec
INSERT INTO species_language (species_id, language_id, name)
VALUES ($1, $2, $3)
ON CONFLICT (species_id, language_id) DO UPDATE
    SET name = EXCLUDED.name
`

type UpsertSpeciesLanguageParams struct {
	SpeciesID  int32
	LanguageID int32
	Name       string
}

func (q *Queries) UpsertSpeciesLanguage(ctx context.Context, arg UpsertSpeciesLanguageParams) error {
	_, err := q.db.Exec(ctx, upsertSpeciesLanguage, arg.SpeciesID, arg.LanguageID, arg.Name)
	return err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO appuser (display_name, google_sub, email)
VALUES ($1, $2, $3)
ON CONFLICT (google_sub) DO UPDATE
    SET display_name = EXCLUDED.display_name,
        email        = EXCLUDED.email
RETURNING id
`

type UpsertUserParams struct {
	DisplayName string
	GoogleSub   string
	Email       string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.DisplayName, arg.GoogleSub, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}
