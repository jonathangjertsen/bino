// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSpeciesName = `-- name: GetSpeciesName :many
SELECT s.id, sl.name FROM species AS s
LEFT JOIN species_language AS sl
ON sl.species_id = s.id
HAVING sl.language_id = $1
`

type GetSpeciesNameRow struct {
	ID   int32
	Name pgtype.Text
}

func (q *Queries) GetSpeciesName(ctx context.Context, languageID int32) ([]GetSpeciesNameRow, error) {
	rows, err := q.db.Query(ctx, getSpeciesName, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSpeciesNameRow
	for rows.Next() {
		var i GetSpeciesNameRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
