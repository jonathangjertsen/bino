// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package main

import (
	"errors"
	"fmt"
)

const (
	// StatusUnknown is a Status of type Unknown.
	StatusUnknown Status = 0
	// StatusPendingAdmission is a Status of type PendingAdmission.
	StatusPendingAdmission Status = 1
	// StatusAdmitted is a Status of type Admitted.
	StatusAdmitted Status = 2
	// StatusAdopted is a Status of type Adopted.
	StatusAdopted Status = 3
	// StatusReleased is a Status of type Released.
	StatusReleased Status = 4
	// StatusTransferredOutsideOrganization is a Status of type TransferredOutsideOrganization.
	StatusTransferredOutsideOrganization Status = 5
	// StatusDead is a Status of type Dead.
	StatusDead Status = 6
)

var ErrInvalidStatus = errors.New("not a valid Status")

const _StatusName = "UnknownPendingAdmissionAdmittedAdoptedReleasedTransferredOutsideOrganizationDead"

var _StatusMap = map[Status]string{
	StatusUnknown:                        _StatusName[0:7],
	StatusPendingAdmission:               _StatusName[7:23],
	StatusAdmitted:                       _StatusName[23:31],
	StatusAdopted:                        _StatusName[31:38],
	StatusReleased:                       _StatusName[38:46],
	StatusTransferredOutsideOrganization: _StatusName[46:76],
	StatusDead:                           _StatusName[76:80],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Status) IsValid() bool {
	_, ok := _StatusMap[x]
	return ok
}

var _StatusValue = map[string]Status{
	_StatusName[0:7]:   StatusUnknown,
	_StatusName[7:23]:  StatusPendingAdmission,
	_StatusName[23:31]: StatusAdmitted,
	_StatusName[31:38]: StatusAdopted,
	_StatusName[38:46]: StatusReleased,
	_StatusName[46:76]: StatusTransferredOutsideOrganization,
	_StatusName[76:80]: StatusDead,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is %w", name, ErrInvalidStatus)
}
