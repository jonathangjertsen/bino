// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package main

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPatient = `-- name: AddPatient :one
INSERT INTO patient (species_id, name, curr_home_id, status)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type AddPatientParams struct {
	SpeciesID  int32
	Name       string
	CurrHomeID pgtype.Int4
	Status     int32
}

func (q *Queries) AddPatient(ctx context.Context, arg AddPatientParams) (int32, error) {
	row := q.db.QueryRow(ctx, addPatient,
		arg.SpeciesID,
		arg.Name,
		arg.CurrHomeID,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addPatientEvent = `-- name: AddPatientEvent :one
INSERT INTO patient_event (patient_id, home_id, event_id, note, time)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type AddPatientEventParams struct {
	PatientID int32
	HomeID    int32
	EventID   int32
	Note      string
	Time      pgtype.Timestamptz
}

func (q *Queries) AddPatientEvent(ctx context.Context, arg AddPatientEventParams) (int32, error) {
	row := q.db.QueryRow(ctx, addPatientEvent,
		arg.PatientID,
		arg.HomeID,
		arg.EventID,
		arg.Note,
		arg.Time,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addPatientTags = `-- name: AddPatientTags :exec
INSERT INTO patient_tag (patient_id, tag_id)
VALUES ($1, unnest($2::INT[]))
ON CONFLICT (patient_id, tag_id) DO NOTHING
`

type AddPatientTagsParams struct {
	PatientID int32
	Tags      []int32
}

func (q *Queries) AddPatientTags(ctx context.Context, arg AddPatientTagsParams) error {
	_, err := q.db.Exec(ctx, addPatientTags, arg.PatientID, arg.Tags)
	return err
}

const addSpecies = `-- name: AddSpecies :one
INSERT INTO species (scientific_name)
VALUES ($1)
RETURNING id
`

func (q *Queries) AddSpecies(ctx context.Context, scientificName string) (int32, error) {
	row := q.db.QueryRow(ctx, addSpecies, scientificName)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addTag = `-- name: AddTag :one
INSERT INTO tag (default_show)
    VALUES ($1)
RETURNING id
`

func (q *Queries) AddTag(ctx context.Context, defaultShow bool) (int32, error) {
	row := q.db.QueryRow(ctx, addTag, defaultShow)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const addUserToHome = `-- name: AddUserToHome :exec
INSERT INTO home_appuser (home_id, appuser_id)
VALUES ($1, $2)
`

type AddUserToHomeParams struct {
	HomeID    int32
	AppuserID int32
}

func (q *Queries) AddUserToHome(ctx context.Context, arg AddUserToHomeParams) error {
	_, err := q.db.Exec(ctx, addUserToHome, arg.HomeID, arg.AppuserID)
	return err
}

const getAppusers = `-- name: GetAppusers :many
SELECT au.id, au.display_name, au.google_sub, au.email, au.logging_consent, ha.home_id FROM appuser AS au
LEFT JOIN home_appuser AS ha
    ON ha.appuser_id = au.id
`

type GetAppusersRow struct {
	ID             int32
	DisplayName    string
	GoogleSub      string
	Email          string
	LoggingConsent pgtype.Timestamptz
	HomeID         pgtype.Int4
}

func (q *Queries) GetAppusers(ctx context.Context) ([]GetAppusersRow, error) {
	rows, err := q.db.Query(ctx, getAppusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAppusersRow
	for rows.Next() {
		var i GetAppusersRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.GoogleSub,
			&i.Email,
			&i.LoggingConsent,
			&i.HomeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomes = `-- name: GetHomes :many
SELECT id, name FROM home
ORDER BY name
`

func (q *Queries) GetHomes(ctx context.Context) ([]Home, error) {
	rows, err := q.db.Query(ctx, getHomes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Home
	for rows.Next() {
		var i Home
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomesForUser = `-- name: GetHomesForUser :many
SELECT home_id FROM home_appuser
WHERE appuser_id = $1
`

func (q *Queries) GetHomesForUser(ctx context.Context, appuserID int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getHomesForUser, appuserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var home_id int32
		if err := rows.Scan(&home_id); err != nil {
			return nil, err
		}
		items = append(items, home_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguages = `-- name: GetLanguages :many
SELECT id, short_name, self_name FROM language
ORDER BY id ASC
`

func (q *Queries) GetLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.db.Query(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.ID, &i.ShortName, &i.SelfName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecies = `-- name: GetSpecies :many
SELECT id, scientific_name FROM species
ORDER BY id
`

func (q *Queries) GetSpecies(ctx context.Context) ([]Species, error) {
	rows, err := q.db.Query(ctx, getSpecies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Species
	for rows.Next() {
		var i Species
		if err := rows.Scan(&i.ID, &i.ScientificName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesLanguage = `-- name: GetSpeciesLanguage :many
SELECT species_id, language_id, name FROM species_language
ORDER BY (species_id, language_id)
`

func (q *Queries) GetSpeciesLanguage(ctx context.Context) ([]SpeciesLanguage, error) {
	rows, err := q.db.Query(ctx, getSpeciesLanguage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpeciesLanguage
	for rows.Next() {
		var i SpeciesLanguage
		if err := rows.Scan(&i.SpeciesID, &i.LanguageID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesWithLanguage = `-- name: GetSpeciesWithLanguage :many
SELECT species_id, name FROM species_language
WHERE language_id = $1
ORDER BY (species_id)
`

type GetSpeciesWithLanguageRow struct {
	SpeciesID int32
	Name      string
}

func (q *Queries) GetSpeciesWithLanguage(ctx context.Context, languageID int32) ([]GetSpeciesWithLanguageRow, error) {
	rows, err := q.db.Query(ctx, getSpeciesWithLanguage, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSpeciesWithLanguageRow
	for rows.Next() {
		var i GetSpeciesWithLanguageRow
		if err := rows.Scan(&i.SpeciesID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagWithLanguage = `-- name: GetTagWithLanguage :many
SELECT tag_id, name FROM tag_language
WHERE language_id = $1
ORDER BY (tag_id)
`

type GetTagWithLanguageRow struct {
	TagID int32
	Name  string
}

func (q *Queries) GetTagWithLanguage(ctx context.Context, languageID int32) ([]GetTagWithLanguageRow, error) {
	rows, err := q.db.Query(ctx, getTagWithLanguage, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagWithLanguageRow
	for rows.Next() {
		var i GetTagWithLanguageRow
		if err := rows.Scan(&i.TagID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagWithLanguageCheckin = `-- name: GetTagWithLanguageCheckin :many
SELECT tag_id, name, default_show FROM tag_language
INNER JOIN tag AS t
    ON t.id = tag_language.tag_id
WHERE language_id = $1
ORDER BY (default_show, tag_id) DESC
`

type GetTagWithLanguageCheckinRow struct {
	TagID       int32
	Name        string
	DefaultShow bool
}

func (q *Queries) GetTagWithLanguageCheckin(ctx context.Context, languageID int32) ([]GetTagWithLanguageCheckinRow, error) {
	rows, err := q.db.Query(ctx, getTagWithLanguageCheckin, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagWithLanguageCheckinRow
	for rows.Next() {
		var i GetTagWithLanguageCheckinRow
		if err := rows.Scan(&i.TagID, &i.Name, &i.DefaultShow); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
SELECT id, default_show FROM tag
ORDER BY id
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.DefaultShow); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsLanguage = `-- name: GetTagsLanguage :many
SELECT tag_id, language_id, name FROM tag_language
ORDER BY (tag_id, language_id)
`

func (q *Queries) GetTagsLanguage(ctx context.Context) ([]TagLanguage, error) {
	rows, err := q.db.Query(ctx, getTagsLanguage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TagLanguage
	for rows.Next() {
		var i TagLanguage
		if err := rows.Scan(&i.TagID, &i.LanguageID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT au.id, au.display_name, au.google_sub, au.email, au.logging_consent, COALESCE(al.language_id, 1) FROM appuser AS au
LEFT JOIN appuser_language AS al
ON au.id = al.appuser_id
WHERE id = $1
`

type GetUserRow struct {
	ID             int32
	DisplayName    string
	GoogleSub      string
	Email          string
	LoggingConsent pgtype.Timestamptz
	LanguageID     int32
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.GoogleSub,
		&i.Email,
		&i.LoggingConsent,
		&i.LanguageID,
	)
	return i, err
}

const removeUserFromHome = `-- name: RemoveUserFromHome :exec
DELETE FROM home_appuser
WHERE home_id = $1
  AND appuser_id = $2
`

type RemoveUserFromHomeParams struct {
	HomeID    int32
	AppuserID int32
}

func (q *Queries) RemoveUserFromHome(ctx context.Context, arg RemoveUserFromHomeParams) error {
	_, err := q.db.Exec(ctx, removeUserFromHome, arg.HomeID, arg.AppuserID)
	return err
}

const revokeLoggingConsent = `-- name: RevokeLoggingConsent :exec
UPDATE appuser SET logging_consent = NULL
WHERE id = $1
`

func (q *Queries) RevokeLoggingConsent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, revokeLoggingConsent, id)
	return err
}

const setLoggingConsent = `-- name: SetLoggingConsent :exec
UPDATE appuser SET logging_consent = NOW() + $2::INT * INTERVAL '1 day'
WHERE id = $1
`

type SetLoggingConsentParams struct {
	ID     int32
	Period int32
}

func (q *Queries) SetLoggingConsent(ctx context.Context, arg SetLoggingConsentParams) error {
	_, err := q.db.Exec(ctx, setLoggingConsent, arg.ID, arg.Period)
	return err
}

const setUserLanguage = `-- name: SetUserLanguage :exec
INSERT INTO appuser_language (appuser_id, language_id)
VALUES ($1, $2)
ON CONFLICT (appuser_id) DO UPDATE
    SET language_id = EXCLUDED.language_id
`

type SetUserLanguageParams struct {
	AppuserID  int32
	LanguageID int32
}

func (q *Queries) SetUserLanguage(ctx context.Context, arg SetUserLanguageParams) error {
	_, err := q.db.Exec(ctx, setUserLanguage, arg.AppuserID, arg.LanguageID)
	return err
}

const updateTagDefaultShown = `-- name: UpdateTagDefaultShown :exec
UPDATE tag SET default_show = $1
WHERE id = $2
`

type UpdateTagDefaultShownParams struct {
	DefaultShow bool
	ID          int32
}

func (q *Queries) UpdateTagDefaultShown(ctx context.Context, arg UpdateTagDefaultShownParams) error {
	_, err := q.db.Exec(ctx, updateTagDefaultShown, arg.DefaultShow, arg.ID)
	return err
}

const upsertHome = `-- name: UpsertHome :exec
INSERT INTO home (name)
VALUES ($1)
ON CONFLICT (id) DO UPDATE
    SET name = EXCLUDED.name
`

func (q *Queries) UpsertHome(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, upsertHome, name)
	return err
}

const upsertSpeciesLanguage = `-- name: UpsertSpeciesLanguage :exec
INSERT INTO species_language (species_id, language_id, name)
VALUES ($1, $2, $3)
ON CONFLICT (species_id, language_id) DO UPDATE
    SET name = EXCLUDED.name
`

type UpsertSpeciesLanguageParams struct {
	SpeciesID  int32
	LanguageID int32
	Name       string
}

func (q *Queries) UpsertSpeciesLanguage(ctx context.Context, arg UpsertSpeciesLanguageParams) error {
	_, err := q.db.Exec(ctx, upsertSpeciesLanguage, arg.SpeciesID, arg.LanguageID, arg.Name)
	return err
}

const upsertTagLanguage = `-- name: UpsertTagLanguage :exec
INSERT INTO tag_language (tag_id, language_id, name)
VALUES ($1, $2, $3)
ON CONFLICT (tag_id, language_id) DO UPDATE
    SET name = EXCLUDED.name
`

type UpsertTagLanguageParams struct {
	TagID      int32
	LanguageID int32
	Name       string
}

func (q *Queries) UpsertTagLanguage(ctx context.Context, arg UpsertTagLanguageParams) error {
	_, err := q.db.Exec(ctx, upsertTagLanguage, arg.TagID, arg.LanguageID, arg.Name)
	return err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO appuser (display_name, google_sub, email)
VALUES ($1, $2, $3)
ON CONFLICT (google_sub) DO UPDATE
    SET display_name = EXCLUDED.display_name,
        email        = EXCLUDED.email
RETURNING id
`

type UpsertUserParams struct {
	DisplayName string
	GoogleSub   string
	Email       string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, upsertUser, arg.DisplayName, arg.GoogleSub, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}
