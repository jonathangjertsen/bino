// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
)

func Privacy(data *CommonData, config PrivacyConfig) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				if data.User.LanguageID == 1 {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h1>Personvern</h1><h2>1. Personopplysninger som lagres</h2><p>Bino lagrer informasjon om deg utelukkende for å la deg ha en konto og for å organisere informasjon om pasienter:</p><ol><li>Eventuell informasjon du har oppgitt om deg selv, for eksempel navn og profilbilde.</li><li>Innstillinger for siden som må huskes mellom nettlesersesjoner, for eksempel foretrukket språk.</li><li>Email-addressen din og en ID assosiert med Google-kontoen din. Dette brukes for å la deg logge inn. Det vises ikke til noen.</li><li>Innhold du har laget på siden, for eksempel tekst og bilder av pasienter, samt pasienthistorikk.</li></ol><p>Bino leverer ikke opplysninger til noen tredjeparter (utenom Google for innlogging, og da kun informasjonen i punkt 1).</p><h2>2. Logging av aktivitet</h2><p>Bino gjør ingen tracking eller fingerprinting, uansett hvilke personvernsinnstillinger du har satt.</p><p>For å hjelpe med å løse tekniske problemer kan du velge å la oss logge aktiviteten din på siden, f.eks når du klikker på lenker eller sender inn skjema. Ikke slå på denne innstillingen med mindre administrator har bedt deg gjøre det for å løse et spesifikt problem. Tillatelsen blir automatisk fjernet etter ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var4 string
					templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", config.RevokeConsentPolicy))
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `privacy.templ`, Line: 30, Col: 108}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " dager, og loggene slettes automatisk etter ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var5 string
					templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", config.LogDeletionPolicy))
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `privacy.templ`, Line: 31, Col: 100}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " dager.</p><form><label for=\"logging-consent\">Tillat logging</label> <input id=\"logging-consent\" label=\"logging-consent\" type=\"checkbox\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if data.User.LoggingConsent {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " checked")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "> <input type=\"submit\" value=\"Oppdater\"></form><h2>3. Sletting</h2><p>Når du forlater organisasjonen, kan du kreve at administrator innen rimelig tid sletter opplysninger om deg i henhold til <a href=\"https://www.datatilsynet.no/rettigheter-og-plikter/den-registrertes-rettigheter/rett-til-sletting/\">Personvernforordningen (GDPR) §17</a>. Bino har en slette-knapp som lar administrator slette så mye informasjon som mulig uten å forstyrre organisasjonens drift. Pasienter vil fortsatt være knyttet til en anonym ID, men visningsnavnet blir erstattet med \"Slettet bruker\".</p><p>Det er administrators plikt å sørge for at data generert av Bino (for eksempel loggene nevnt i seksjon) slettes.</p>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				} else {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<h1>Privacy</h1><p>Bino stores information about you for the sole purpose of having an account and organizing information about patients:</p><ul><li>Your email address and Google account ID. This is used to let you log in. It is not shown to anyone.</li><li>Any information you have uploaded about yourself, such as your display name and profile picture.</li><li>Your site preferences (e.g., language setting), so that it is remembered between browser sessions.</li><li>Any content you have uploaded to the site (e.g., patients).</li></ul><p>Google is used as a login provider. Other than that, there is no communication with third-parties whatsoever.</p><h2>Logging av aktivitet</h2><p>Bino does not do any tracking or fingerprinting, regardless of your privacy settings.</p><p>To help resolving technical issues, you may opt in to letting us log your activity on the site (such as clicking links or submitting forms). These logs are deleted automatically after ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var6 string
					templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", config.LogDeletionPolicy))
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `privacy.templ`, Line: 67, Col: 107}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " days. Do not enable this unless you have been asked by an administrator to help solve a specific issue you are having with the site. You will be automatically opted out after ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var7 string
					templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", config.RevokeConsentPolicy))
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `privacy.templ`, Line: 69, Col: 108}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " days.</p><form><label for=\"logging-consent\">Opt in to logging</label> <input id=\"logging-consent\" label=\"logging-consent\" type=\"checkbox\"> <input type=\"submit\" value=\"Update\"></form>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				return nil
			})
			templ_7745c5c3_Err = Card().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout(data).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
